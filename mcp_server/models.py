# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:36:52+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class AcmeTxtRecord(BaseModel):
    digest: Optional[str] = Field(
        None,
        description='Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT record data entry.',
    )
    fqdn: Optional[str] = Field(
        None,
        description='The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a response, this will be in Unicode. The fqdn MUST contain the root_domain field on the request.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The time when this record was last updated. This will be in UTC time.',
    )


class RotateChallengesRequest(BaseModel):
    accessToken: Optional[str] = Field(
        None,
        description='Required. ACME DNS access token. This is a base64 token secret that is procured from the Google Domains website. It authorizes ACME TXT record updates for a domain.',
    )
    keepExpiredRecords: Optional[bool] = Field(
        None,
        description='Keep records older than 30 days that were used for previous requests.',
    )
    recordsToAdd: Optional[List[AcmeTxtRecord]] = Field(
        None,
        description='ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.',
    )
    recordsToRemove: Optional[List[AcmeTxtRecord]] = Field(
        None, description='ACME TXT record challenges to remove.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AcmeChallengeSet(BaseModel):
    record: Optional[List[AcmeTxtRecord]] = Field(
        None,
        description='The ACME challenges on the requested domain represented as individual TXT records.',
    )
